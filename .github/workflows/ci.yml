name: Go Library Release

on:
  push:
    branches: [master]

jobs:
  validate:
    name: Format & Mod Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Check formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Run 'gofmt -s -w .' to fix formatting"
            exit 1
          fi

      - name: Go mod tidy & verify
        run: |
          go mod tidy
          go mod verify

  release:
    name: Create tag & release
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep '^v' | head -n 1)
          echo "Ãšltima tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Bump patch version and create tag
        id: new_tag
        run: |
          latest=${{ steps.get_tag.outputs.latest_tag }}
          if [ -z "$latest" ]; then
            new_tag="v0.1.0"
          else
            IFS='.' read -r major minor patch <<< "${latest#v}"
            patch=$((patch + 1))
            new_tag="v$major.$minor.$patch"
          fi
          git tag "$new_tag"
          git push origin "$new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.new_tag.outputs.new_tag }}
          generate_release_notes: true
